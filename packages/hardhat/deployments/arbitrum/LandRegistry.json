{
  "address": "0x132CdfA6c95E84B028D55476d997eFe78dc9A728",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acres",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "LandFractionalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "landOwnerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "userDid",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAreaInAcre",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAreaInDecimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LandRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "name": "LandVerified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "approver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_plotNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_acresToFractionalize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimalsToFractionalize",
          "type": "uint256"
        }
      ],
      "name": "fractionalizeLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_plotNumber",
          "type": "string"
        }
      ],
      "name": "getLandByPlotNumber",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "landOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "userDid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "thramNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "plotNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct LandRegistry.LandDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getLandsByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "landOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "userDid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "thramNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "plotNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct LandRegistry.LandDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userDid",
          "type": "string"
        }
      ],
      "name": "getLandsByUserDid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "landOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "userDid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "thramNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "plotNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct LandRegistry.LandDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_thramNumber",
          "type": "string"
        }
      ],
      "name": "getPlotsByThramNumber",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "landOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "userDid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "thramNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "plotNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInAcre",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableAreaInDecimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct LandRegistry.LandDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "landsByOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "landOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userDid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "landsByPlotNumber",
      "outputs": [
        {
          "internalType": "address",
          "name": "landOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userDid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "landsByThramNumber",
      "outputs": [
        {
          "internalType": "address",
          "name": "landOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userDid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "landsByUserDid",
      "outputs": [
        {
          "internalType": "address",
          "name": "landOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userDid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "plotNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAreaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_plotNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_areaInAcre",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_areaInDecimal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_landOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_userDid",
          "type": "string"
        }
      ],
      "name": "registerLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_thramNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_plotNumber",
          "type": "string"
        }
      ],
      "name": "verifyLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf4aaf3d02e36b77267622d6cbc8074dbefa06d1c9a31524badc99ee80ae312e",
  "receipt": {
    "to": null,
    "from": "0x32E160BC37FB868FA5A3AbeeECB758d991329172",
    "contractAddress": "0x132CdfA6c95E84B028D55476d997eFe78dc9A728",
    "transactionIndex": 1,
    "gasUsed": "2249235",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbd17c7311e844ffe26c22a32cf3f6db92272251fc1e9686fc1fde0883c3d2ab2",
    "transactionHash": "0xdf4aaf3d02e36b77267622d6cbc8074dbefa06d1c9a31524badc99ee80ae312e",
    "logs": [],
    "blockNumber": 352346952,
    "cumulativeGasUsed": "2249235",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32E160BC37FB868FA5A3AbeeECB758d991329172"
  ],
  "numDeployments": 1,
  "solcInputHash": "cfb8f0f0407e8de500720a6f30b62151",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acres\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"LandFractionalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LandRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"LandVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_plotNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_acresToFractionalize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimalsToFractionalize\",\"type\":\"uint256\"}],\"name\":\"fractionalizeLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_plotNumber\",\"type\":\"string\"}],\"name\":\"getLandByPlotNumber\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct LandRegistry.LandDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLandsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct LandRegistry.LandDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userDid\",\"type\":\"string\"}],\"name\":\"getLandsByUserDid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct LandRegistry.LandDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thramNumber\",\"type\":\"string\"}],\"name\":\"getPlotsByThramNumber\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct LandRegistry.LandDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsByOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"landsByPlotNumber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsByThramNumber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsByUserDid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAreaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_plotNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_areaInAcre\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_areaInDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_landOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_userDid\",\"type\":\"string\"}],\"name\":\"registerLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thramNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_plotNumber\",\"type\":\"string\"}],\"name\":\"verifyLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LandRegistry.sol\":\"LandRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LandRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LandRegistry {\\n    // State Variables\\n    address public immutable approver;\\n    address public owner;\\n    \\n    // Define a struct to hold the land details\\n    struct LandDetails {\\n        address landOwnerAddress;\\n        string userDid;\\n        string thramNumber;\\n        string plotNumber;\\n        string location;\\n        uint256 totalAreaInAcre;\\n        uint256 totalAreaInDecimal;\\n        uint256 availableAreaInAcre;\\n        uint256 availableAreaInDecimal;\\n        uint256 timestamp;\\n        bool isVerified;\\n    }\\n\\n    // Define mappings for efficient lookup\\n    mapping (string => LandDetails[]) public landsByThramNumber;\\n    mapping (string => LandDetails) public landsByPlotNumber;\\n    mapping (address => LandDetails[]) public landsByOwner;\\n    mapping (string => LandDetails[]) public landsByUserDid;\\n\\n    // Events\\n    event LandRegistered(\\n        address indexed landOwnerAddress,\\n        string indexed userDid,\\n        string indexed thramNumber,\\n        string plotNumber,\\n        string location,\\n        uint256 totalAreaInAcre,\\n        uint256 totalAreaInDecimal,\\n        bool isVerified,\\n        uint256 timestamp\\n    );\\n\\n    event LandVerified(string indexed thramNumber, string indexed plotNumber, bool isVerified);\\n    event LandFractionalized(string indexed plotNumber, uint256 acres, uint256 decimals);\\n\\n    modifier onlyApprover() {\\n        require(msg.sender == approver, \\\"Caller is not the approver\\\");\\n        _;\\n    }\\n\\n    constructor(address _approver) {\\n        require(_approver != address(0), \\\"Invalid approver address\\\");\\n        approver = _approver;\\n    }\\n\\n    function registerLand(\\n        string memory _thramNumber, \\n        string memory _plotNumber, \\n        string memory _location, \\n        uint256 _areaInAcre, \\n        uint256 _areaInDecimal, \\n        address _landOwnerAddress,\\n        string memory _userDid\\n    ) public onlyApprover {\\n        require(_landOwnerAddress != address(0), \\\"Invalid owner address\\\");\\n        require(bytes(_thramNumber).length > 0, \\\"Thram number cannot be empty\\\");\\n        require(bytes(_plotNumber).length > 0, \\\"Plot number cannot be empty\\\");\\n        require(bytes(_userDid).length > 0, \\\"User DID cannot be empty\\\");\\n        require(_areaInAcre > 0 || _areaInDecimal > 0, \\\"Area must be greater than zero\\\");\\n        require(landsByPlotNumber[_plotNumber].landOwnerAddress == address(0), \\\"Plot number already registered\\\");\\n\\n        LandDetails memory newLand = LandDetails({\\n            landOwnerAddress: _landOwnerAddress,\\n            userDid: _userDid,\\n            thramNumber: _thramNumber,\\n            plotNumber: _plotNumber,\\n            location: _location,\\n            totalAreaInAcre: _areaInAcre,\\n            totalAreaInDecimal: _areaInDecimal,\\n            availableAreaInAcre: _areaInAcre,\\n            availableAreaInDecimal: _areaInDecimal,\\n            timestamp: block.timestamp,\\n            isVerified: false\\n        });\\n\\n        // Store the land details in all mappings\\n        landsByThramNumber[_thramNumber].push(newLand);\\n        landsByPlotNumber[_plotNumber] = newLand;\\n        landsByOwner[_landOwnerAddress].push(newLand);\\n        landsByUserDid[_userDid].push(newLand);\\n\\n        emit LandRegistered(\\n            _landOwnerAddress, \\n            _userDid,\\n            _thramNumber, \\n            _plotNumber, \\n            _location, \\n            _areaInAcre, \\n            _areaInDecimal, \\n            false, \\n            block.timestamp\\n        );\\n    }\\n\\n    function verifyLand(string memory _thramNumber, string memory _plotNumber) public onlyApprover {\\n        LandDetails storage landByPlot = landsByPlotNumber[_plotNumber];\\n        \\n        require(landByPlot.landOwnerAddress != address(0), \\\"Land not found by plot number\\\");\\n        require(keccak256(bytes(landByPlot.thramNumber)) == keccak256(bytes(_thramNumber)), \\n            \\\"Plot number doesn't belong to this thram\\\");\\n\\n        landByPlot.isVerified = true;\\n        \\n        // Update verification status in all mappings\\n        for (uint i = 0; i < landsByThramNumber[_thramNumber].length; i++) {\\n            if (keccak256(bytes(landsByThramNumber[_thramNumber][i].plotNumber)) == keccak256(bytes(_plotNumber))) {\\n                landsByThramNumber[_thramNumber][i].isVerified = true;\\n                break;\\n            }\\n        }\\n        \\n        emit LandVerified(_thramNumber, _plotNumber, true);\\n    }\\n\\n    function fractionalizeLand(\\n        string memory _plotNumber,\\n        uint256 _acresToFractionalize,\\n        uint256 _decimalsToFractionalize\\n    ) public onlyApprover {\\n        LandDetails storage land = landsByPlotNumber[_plotNumber];\\n        require(land.landOwnerAddress != address(0), \\\"Land not found\\\");\\n        require(\\n            _acresToFractionalize <= land.availableAreaInAcre &&\\n            _decimalsToFractionalize <= land.availableAreaInDecimal,\\n            \\\"Cannot fractionalize more than available\\\"\\n        );\\n\\n        land.availableAreaInAcre -= _acresToFractionalize;\\n        land.availableAreaInDecimal -= _decimalsToFractionalize;\\n\\n        emit LandFractionalized(_plotNumber, _acresToFractionalize, _decimalsToFractionalize);\\n    }\\n\\n    function getPlotsByThramNumber(string memory _thramNumber) public view returns (LandDetails[] memory) {\\n        require(landsByThramNumber[_thramNumber].length > 0, \\\"No plots found for this thram number\\\");\\n        return landsByThramNumber[_thramNumber];\\n    }\\n\\n    function getLandByPlotNumber(string memory _plotNumber) public view returns (LandDetails memory) {\\n        LandDetails memory land = landsByPlotNumber[_plotNumber];\\n        require(land.landOwnerAddress != address(0), \\\"Land not found\\\");\\n        return land;\\n    }\\n\\n    function getLandsByUserDid(string memory _userDid) public view returns (LandDetails[] memory) {\\n        require(bytes(_userDid).length > 0, \\\"User DID cannot be empty\\\");\\n        require(landsByUserDid[_userDid].length > 0, \\\"No lands found for this user DID\\\");\\n        return landsByUserDid[_userDid];\\n    }\\n\\n    function getLandsByOwner(address _owner) public view returns (LandDetails[] memory) {\\n        return landsByOwner[_owner];\\n    }\\n}\",\"keccak256\":\"0x35ab08b6182f0f0c90d8a729ae060a16c7bbfb925c7f233d5f5c9405cfee8d5f\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620027f5380380620027f58339810160408190526200003491620000a1565b6001600160a01b0381166200008f5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420617070726f76657220616464726573730000000000000000604482015260640160405180910390fd5b6001600160a01b0316608052620000d3565b600060208284031215620000b457600080fd5b81516001600160a01b0381168114620000cc57600080fd5b9392505050565b6080516126f1620001046000396000818161010c015281816104f101528181610e3e015261144001526126f16000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c6b0c22f1161008c578063e599378311610066578063e5993783146101e7578063ea556b57146101fa578063f11622471461020d578063f550583c1461022057600080fd5b8063c6b0c22f146101ae578063c99460df146101c1578063db83f91d146101d457600080fd5b8063080cadfd146100d4578063141a8dd81461010757806337278e3814610146578063455b9d231461015b5780638da5cb5b1461017b5780639a12c1fa1461018e575b600080fd5b6100e76100e2366004611f6a565b610233565b6040516100fe9b9a99989796959493929190611fff565b60405180910390f35b61012e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100fe565b61015961015436600461209b565b6104e6565b005b61016e61016936600461211b565b610799565b6040516100fe919061220b565b60005461012e906001600160a01b031681565b6101a161019c36600461226d565b610ab4565b6040516100fe91906122aa565b6101596101bc3660046122bd565b610e33565b6100e76101cf366004611f6a565b610fe4565b6100e76101e236600461230b565b61100f565b6100e76101f536600461226d565b61102b565b61016e61020836600461226d565b611062565b61015961021b366004612335565b611435565b61016e61022e36600461226d565b611b34565b8151602081840181018051600182529282019185019190912091905280548290811061025e57600080fd5b60009182526020909120600b9091020180546001820180546001600160a01b03909216945091925061028f90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90612406565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b50505050509080600201805461031d90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461034990612406565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050908060030180546103ab90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790612406565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b50505050509080600401805461043990612406565b80601f016020809104026020016040519081016040528092919081815260200182805461046590612406565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b50505060058401546006850154600786015460088701546009880154600a9098015496979396929550909350919060ff168b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105375760405162461bcd60e51b815260040161052e90612440565b60405180910390fd5b60006002826040516105499190612477565b90815260405190819003602001902080549091506001600160a01b03166105b25760405162461bcd60e51b815260206004820152601d60248201527f4c616e64206e6f7420666f756e6420627920706c6f74206e756d626572000000604482015260640161052e565b825160208401206040516105ca906002840190612493565b6040518091039020146106305760405162461bcd60e51b815260206004820152602860248201527f506c6f74206e756d62657220646f65736e27742062656c6f6e6720746f207468604482015267697320746872616d60c01b606482015260840161052e565b600a8101805460ff1916600117905560005b6001846040516106529190612477565b908152604051908190036020019020548110156107345782805190602001206001856040516106819190612477565b908152602001604051809103902082815481106106a0576106a0612509565b90600052602060002090600b02016003016040516106be9190612493565b60405180910390200361072257600180856040516106dc9190612477565b908152602001604051809103902082815481106106fb576106fb612509565b60009182526020909120600b90910201600a01805460ff1916911515919091179055610734565b8061072c81612535565b915050610642565b50816040516107439190612477565b6040518091039020836040516107599190612477565b60405190819003812060018252907f893142b1af95d679b728e8ea3f9e641b0d1466811cff9af0d230a1042f1cae1d9060200160405180910390a3505050565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b03168252600181018054929391929184019161081b90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461084790612406565b80156108945780601f1061086957610100808354040283529160200191610894565b820191906000526020600020905b81548152906001019060200180831161087757829003601f168201915b505050505081526020016002820180546108ad90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546108d990612406565b80156109265780601f106108fb57610100808354040283529160200191610926565b820191906000526020600020905b81548152906001019060200180831161090957829003601f168201915b5050505050815260200160038201805461093f90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461096b90612406565b80156109b85780601f1061098d576101008083540402835291602001916109b8565b820191906000526020600020905b81548152906001019060200180831161099b57829003601f168201915b505050505081526020016004820180546109d190612406565b80601f01602080910402602001604051908101604052809291908181526020018280546109fd90612406565b8015610a4a5780601f10610a1f57610100808354040283529160200191610a4a565b820191906000526020600020905b815481529060010190602001808311610a2d57829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c09091015290825260019290920191016107d1565b505050509050919050565b610b1c60405180610160016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000600283604051610b2e9190612477565b908152604080519182900360209081018320610160840190925281546001600160a01b0316835260018201805491840191610b6890612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9490612406565b8015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b50505050508152602001600282018054610bfa90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2690612406565b8015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b50505050508152602001600382018054610c8c90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890612406565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b50505050508152602001600482018054610d1e90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4a90612406565b8015610d975780601f10610d6c57610100808354040283529160200191610d97565b820191906000526020600020905b815481529060010190602001808311610d7a57829003601f168201915b505050918352505060058201546020820152600682015460408201526007820154606082015260088201546080820152600982015460a0820152600a9091015460ff16151560c09091015280519091506001600160a01b0316610e2d5760405162461bcd60e51b815260206004820152600e60248201526d13185b99081b9bdd08199bdd5b9960921b604482015260640161052e565b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e7b5760405162461bcd60e51b815260040161052e90612440565b6000600284604051610e8d9190612477565b90815260405190819003602001902080549091506001600160a01b0316610ee75760405162461bcd60e51b815260206004820152600e60248201526d13185b99081b9bdd08199bdd5b9960921b604482015260640161052e565b80600701548311158015610eff575080600801548211155b610f5c5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f74206672616374696f6e616c697a65206d6f7265207468616e20616044820152677661696c61626c6560c01b606482015260840161052e565b82816007016000828254610f70919061254e565b9250508190555081816008016000828254610f8b919061254e565b9091555050604051610f9e908590612477565b6040805191829003822085835260208301859052917f36e5603ae6cded8dd12ecafe43571e9aa83587df71e0c1eb730be0ffe5441302910160405180910390a250505050565b8151602081840181018051600482529282019185019190912091905280548290811061025e57600080fd5b6003602052816000526040600020818154811061025e57600080fd5b8051602081830181018051600282529282019190930120915280546001820180546001600160a01b03909216929161028f90612406565b606060008251116110b05760405162461bcd60e51b815260206004820152601860248201527755736572204449442063616e6e6f7420626520656d70747960401b604482015260640161052e565b60006004836040516110c29190612477565b908152604051908190036020019020541161111f5760405162461bcd60e51b815260206004820181905260248201527f4e6f206c616e647320666f756e6420666f722074686973207573657220444944604482015260640161052e565b60048260405161112f9190612477565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b0316825260018101805492939192918401916111a790612406565b80601f01602080910402602001604051908101604052809291908181526020018280546111d390612406565b80156112205780601f106111f557610100808354040283529160200191611220565b820191906000526020600020905b81548152906001019060200180831161120357829003601f168201915b5050505050815260200160028201805461123990612406565b80601f016020809104026020016040519081016040528092919081815260200182805461126590612406565b80156112b25780601f10611287576101008083540402835291602001916112b2565b820191906000526020600020905b81548152906001019060200180831161129557829003601f168201915b505050505081526020016003820180546112cb90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546112f790612406565b80156113445780601f1061131957610100808354040283529160200191611344565b820191906000526020600020905b81548152906001019060200180831161132757829003601f168201915b5050505050815260200160048201805461135d90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461138990612406565b80156113d65780601f106113ab576101008083540402835291602001916113d6565b820191906000526020600020905b8154815290600101906020018083116113b957829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c090910152908252600192909201910161115d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461147d5760405162461bcd60e51b815260040161052e90612440565b6001600160a01b0382166114cb5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b604482015260640161052e565b600087511161151c5760405162461bcd60e51b815260206004820152601c60248201527f546872616d206e756d6265722063616e6e6f7420626520656d70747900000000604482015260640161052e565b600086511161156d5760405162461bcd60e51b815260206004820152601b60248201527f506c6f74206e756d6265722063616e6e6f7420626520656d7074790000000000604482015260640161052e565b60008151116115b95760405162461bcd60e51b815260206004820152601860248201527755736572204449442063616e6e6f7420626520656d70747960401b604482015260640161052e565b60008411806115c85750600083115b6116145760405162461bcd60e51b815260206004820152601e60248201527f41726561206d7573742062652067726561746572207468616e207a65726f0000604482015260640161052e565b60006001600160a01b031660028760405161162f9190612477565b908152604051908190036020019020546001600160a01b0316146116955760405162461bcd60e51b815260206004820152601e60248201527f506c6f74206e756d62657220616c726561647920726567697374657265640000604482015260640161052e565b6000604051806101600160405280846001600160a01b031681526020018381526020018981526020018881526020018781526020018681526020018581526020018681526020018581526020014281526020016000151581525090506001886040516117019190612477565b908152604051602091819003820190208054600180820183556000928352918390208451600b9092020180546001600160a01b0319166001600160a01b039092169190911781559183015183929182019061175c90826125b0565b506040820151600282019061177190826125b0565b506060820151600382019061178690826125b0565b506080820151600482019061179b90826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905560405181906002906117fe908a90612477565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b0390911617815590820151600182019061183d90826125b0565b506040820151600282019061185290826125b0565b506060820151600382019061186790826125b0565b506080820151600482019061187c90826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff19169115159190911790556001600160a01b0383811660009081526003602090815260408220805460018181018355918452928290208551600b9094020180546001600160a01b0319169390941692909217835583015183929182019061192890826125b0565b506040820151600282019061193d90826125b0565b506060820151600382019061195290826125b0565b506080820151600482019061196790826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff19169115159190911790556040516004906119c8908490612477565b908152604051602091819003820190208054600180820183556000928352918390208451600b9092020180546001600160a01b0319166001600160a01b0390921691909117815591830151839291820190611a2390826125b0565b5060408201516002820190611a3890826125b0565b5060608201516003820190611a4d90826125b0565b5060808201516004820190611a6290826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff1916911515919091179055604051611ac0908990612477565b604051809103902082604051611ad69190612477565b6040518091039020846001600160a01b03167f70e7c6fc807ab79015df56e4ad47cb924e80df552eba76703ab4b5017014c3408a8a8a8a600042604051611b2296959493929190612670565b60405180910390a45050505050505050565b60606000600183604051611b489190612477565b9081526040519081900360200190205411611bb15760405162461bcd60e51b8152602060048201526024808201527f4e6f20706c6f747320666f756e6420666f72207468697320746872616d206e7560448201526336b132b960e11b606482015260840161052e565b600182604051611bc19190612477565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b031682526001810180549293919291840191611c3990612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6590612406565b8015611cb25780601f10611c8757610100808354040283529160200191611cb2565b820191906000526020600020905b815481529060010190602001808311611c9557829003601f168201915b50505050508152602001600282018054611ccb90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf790612406565b8015611d445780601f10611d1957610100808354040283529160200191611d44565b820191906000526020600020905b815481529060010190602001808311611d2757829003601f168201915b50505050508152602001600382018054611d5d90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8990612406565b8015611dd65780601f10611dab57610100808354040283529160200191611dd6565b820191906000526020600020905b815481529060010190602001808311611db957829003601f168201915b50505050508152602001600482018054611def90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1b90612406565b8015611e685780601f10611e3d57610100808354040283529160200191611e68565b820191906000526020600020905b815481529060010190602001808311611e4b57829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c0909101529082526001929092019101611bef565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611eee57600080fd5b813567ffffffffffffffff80821115611f0957611f09611ec7565b604051601f8301601f19908116603f01168101908282118183101715611f3157611f31611ec7565b81604052838152866020858801011115611f4a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611f7d57600080fd5b823567ffffffffffffffff811115611f9457600080fd5b611fa085828601611edd565b95602094909401359450505050565b60005b83811015611fca578181015183820152602001611fb2565b50506000910152565b60008151808452611feb816020860160208601611faf565b601f01601f19169290920160200192915050565b6001600160a01b038c168152610160602082018190526000906120248382018e611fd3565b90508281036040840152612038818d611fd3565b9050828103606084015261204c818c611fd3565b90508281036080840152612060818b611fd3565b60a0840199909952505060c081019590955260e085019390935261010084019190915261012083015215156101409091015295945050505050565b600080604083850312156120ae57600080fd5b823567ffffffffffffffff808211156120c657600080fd5b6120d286838701611edd565b935060208501359150808211156120e857600080fd5b506120f585828601611edd565b9150509250929050565b80356001600160a01b038116811461211657600080fd5b919050565b60006020828403121561212d57600080fd5b612136826120ff565b9392505050565b80516001600160a01b031682526000610160602083015181602086015261216682860182611fd3565b915050604083015184820360408601526121808282611fd3565b9150506060830151848203606086015261219a8282611fd3565b915050608083015184820360808601526121b48282611fd3565b91505060a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401516122018287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561226057603f1988860301845261224e85835161213d565b94509285019290850190600101612232565b5092979650505050505050565b60006020828403121561227f57600080fd5b813567ffffffffffffffff81111561229657600080fd5b6122a284828501611edd565b949350505050565b602081526000612136602083018461213d565b6000806000606084860312156122d257600080fd5b833567ffffffffffffffff8111156122e957600080fd5b6122f586828701611edd565b9660208601359650604090950135949350505050565b6000806040838503121561231e57600080fd5b612327836120ff565b946020939093013593505050565b600080600080600080600060e0888a03121561235057600080fd5b873567ffffffffffffffff8082111561236857600080fd5b6123748b838c01611edd565b985060208a013591508082111561238a57600080fd5b6123968b838c01611edd565b975060408a01359150808211156123ac57600080fd5b6123b88b838c01611edd565b965060608a0135955060808a013594506123d460a08b016120ff565b935060c08a01359150808211156123ea57600080fd5b506123f78a828b01611edd565b91505092959891949750929550565b600181811c9082168061241a57607f821691505b60208210810361243a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520617070726f766572000000000000604082015260600190565b60008251612489818460208701611faf565b9190910192915050565b60008083546124a181612406565b600182811680156124b957600181146124ce576124fd565b60ff19841687528215158302870194506124fd565b8760005260208060002060005b858110156124f45781548a8201529084019082016124db565b50505082870194505b50929695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125475761254761251f565b5060010190565b81810381811115610e2d57610e2d61251f565b601f8211156125ab57600081815260208120601f850160051c810160208610156125885750805b601f850160051c820191505b818110156125a757828155600101612594565b5050505b505050565b815167ffffffffffffffff8111156125ca576125ca611ec7565b6125de816125d88454612406565b84612561565b602080601f83116001811461261357600084156125fb5750858301515b600019600386901b1c1916600185901b1785556125a7565b600085815260208120601f198616915b8281101561264257888601518255948401946001909101908401612623565b50858210156126605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c08152600061268360c0830189611fd3565b82810360208401526126958189611fd3565b604084019790975250506060810193909352901515608083015260a0909101529291505056fea26469706673582212201d9c23788f8dbf4ce8a8c2585e75abbc2e6ff225ff267baf02c68abc4715bbf264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c6b0c22f1161008c578063e599378311610066578063e5993783146101e7578063ea556b57146101fa578063f11622471461020d578063f550583c1461022057600080fd5b8063c6b0c22f146101ae578063c99460df146101c1578063db83f91d146101d457600080fd5b8063080cadfd146100d4578063141a8dd81461010757806337278e3814610146578063455b9d231461015b5780638da5cb5b1461017b5780639a12c1fa1461018e575b600080fd5b6100e76100e2366004611f6a565b610233565b6040516100fe9b9a99989796959493929190611fff565b60405180910390f35b61012e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100fe565b61015961015436600461209b565b6104e6565b005b61016e61016936600461211b565b610799565b6040516100fe919061220b565b60005461012e906001600160a01b031681565b6101a161019c36600461226d565b610ab4565b6040516100fe91906122aa565b6101596101bc3660046122bd565b610e33565b6100e76101cf366004611f6a565b610fe4565b6100e76101e236600461230b565b61100f565b6100e76101f536600461226d565b61102b565b61016e61020836600461226d565b611062565b61015961021b366004612335565b611435565b61016e61022e36600461226d565b611b34565b8151602081840181018051600182529282019185019190912091905280548290811061025e57600080fd5b60009182526020909120600b9091020180546001820180546001600160a01b03909216945091925061028f90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90612406565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b50505050509080600201805461031d90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461034990612406565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050908060030180546103ab90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790612406565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b50505050509080600401805461043990612406565b80601f016020809104026020016040519081016040528092919081815260200182805461046590612406565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b50505060058401546006850154600786015460088701546009880154600a9098015496979396929550909350919060ff168b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105375760405162461bcd60e51b815260040161052e90612440565b60405180910390fd5b60006002826040516105499190612477565b90815260405190819003602001902080549091506001600160a01b03166105b25760405162461bcd60e51b815260206004820152601d60248201527f4c616e64206e6f7420666f756e6420627920706c6f74206e756d626572000000604482015260640161052e565b825160208401206040516105ca906002840190612493565b6040518091039020146106305760405162461bcd60e51b815260206004820152602860248201527f506c6f74206e756d62657220646f65736e27742062656c6f6e6720746f207468604482015267697320746872616d60c01b606482015260840161052e565b600a8101805460ff1916600117905560005b6001846040516106529190612477565b908152604051908190036020019020548110156107345782805190602001206001856040516106819190612477565b908152602001604051809103902082815481106106a0576106a0612509565b90600052602060002090600b02016003016040516106be9190612493565b60405180910390200361072257600180856040516106dc9190612477565b908152602001604051809103902082815481106106fb576106fb612509565b60009182526020909120600b90910201600a01805460ff1916911515919091179055610734565b8061072c81612535565b915050610642565b50816040516107439190612477565b6040518091039020836040516107599190612477565b60405190819003812060018252907f893142b1af95d679b728e8ea3f9e641b0d1466811cff9af0d230a1042f1cae1d9060200160405180910390a3505050565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b03168252600181018054929391929184019161081b90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461084790612406565b80156108945780601f1061086957610100808354040283529160200191610894565b820191906000526020600020905b81548152906001019060200180831161087757829003601f168201915b505050505081526020016002820180546108ad90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546108d990612406565b80156109265780601f106108fb57610100808354040283529160200191610926565b820191906000526020600020905b81548152906001019060200180831161090957829003601f168201915b5050505050815260200160038201805461093f90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461096b90612406565b80156109b85780601f1061098d576101008083540402835291602001916109b8565b820191906000526020600020905b81548152906001019060200180831161099b57829003601f168201915b505050505081526020016004820180546109d190612406565b80601f01602080910402602001604051908101604052809291908181526020018280546109fd90612406565b8015610a4a5780601f10610a1f57610100808354040283529160200191610a4a565b820191906000526020600020905b815481529060010190602001808311610a2d57829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c09091015290825260019290920191016107d1565b505050509050919050565b610b1c60405180610160016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000600283604051610b2e9190612477565b908152604080519182900360209081018320610160840190925281546001600160a01b0316835260018201805491840191610b6890612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9490612406565b8015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b50505050508152602001600282018054610bfa90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2690612406565b8015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b50505050508152602001600382018054610c8c90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890612406565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b50505050508152602001600482018054610d1e90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4a90612406565b8015610d975780601f10610d6c57610100808354040283529160200191610d97565b820191906000526020600020905b815481529060010190602001808311610d7a57829003601f168201915b505050918352505060058201546020820152600682015460408201526007820154606082015260088201546080820152600982015460a0820152600a9091015460ff16151560c09091015280519091506001600160a01b0316610e2d5760405162461bcd60e51b815260206004820152600e60248201526d13185b99081b9bdd08199bdd5b9960921b604482015260640161052e565b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e7b5760405162461bcd60e51b815260040161052e90612440565b6000600284604051610e8d9190612477565b90815260405190819003602001902080549091506001600160a01b0316610ee75760405162461bcd60e51b815260206004820152600e60248201526d13185b99081b9bdd08199bdd5b9960921b604482015260640161052e565b80600701548311158015610eff575080600801548211155b610f5c5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f74206672616374696f6e616c697a65206d6f7265207468616e20616044820152677661696c61626c6560c01b606482015260840161052e565b82816007016000828254610f70919061254e565b9250508190555081816008016000828254610f8b919061254e565b9091555050604051610f9e908590612477565b6040805191829003822085835260208301859052917f36e5603ae6cded8dd12ecafe43571e9aa83587df71e0c1eb730be0ffe5441302910160405180910390a250505050565b8151602081840181018051600482529282019185019190912091905280548290811061025e57600080fd5b6003602052816000526040600020818154811061025e57600080fd5b8051602081830181018051600282529282019190930120915280546001820180546001600160a01b03909216929161028f90612406565b606060008251116110b05760405162461bcd60e51b815260206004820152601860248201527755736572204449442063616e6e6f7420626520656d70747960401b604482015260640161052e565b60006004836040516110c29190612477565b908152604051908190036020019020541161111f5760405162461bcd60e51b815260206004820181905260248201527f4e6f206c616e647320666f756e6420666f722074686973207573657220444944604482015260640161052e565b60048260405161112f9190612477565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b0316825260018101805492939192918401916111a790612406565b80601f01602080910402602001604051908101604052809291908181526020018280546111d390612406565b80156112205780601f106111f557610100808354040283529160200191611220565b820191906000526020600020905b81548152906001019060200180831161120357829003601f168201915b5050505050815260200160028201805461123990612406565b80601f016020809104026020016040519081016040528092919081815260200182805461126590612406565b80156112b25780601f10611287576101008083540402835291602001916112b2565b820191906000526020600020905b81548152906001019060200180831161129557829003601f168201915b505050505081526020016003820180546112cb90612406565b80601f01602080910402602001604051908101604052809291908181526020018280546112f790612406565b80156113445780601f1061131957610100808354040283529160200191611344565b820191906000526020600020905b81548152906001019060200180831161132757829003601f168201915b5050505050815260200160048201805461135d90612406565b80601f016020809104026020016040519081016040528092919081815260200182805461138990612406565b80156113d65780601f106113ab576101008083540402835291602001916113d6565b820191906000526020600020905b8154815290600101906020018083116113b957829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c090910152908252600192909201910161115d565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461147d5760405162461bcd60e51b815260040161052e90612440565b6001600160a01b0382166114cb5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b604482015260640161052e565b600087511161151c5760405162461bcd60e51b815260206004820152601c60248201527f546872616d206e756d6265722063616e6e6f7420626520656d70747900000000604482015260640161052e565b600086511161156d5760405162461bcd60e51b815260206004820152601b60248201527f506c6f74206e756d6265722063616e6e6f7420626520656d7074790000000000604482015260640161052e565b60008151116115b95760405162461bcd60e51b815260206004820152601860248201527755736572204449442063616e6e6f7420626520656d70747960401b604482015260640161052e565b60008411806115c85750600083115b6116145760405162461bcd60e51b815260206004820152601e60248201527f41726561206d7573742062652067726561746572207468616e207a65726f0000604482015260640161052e565b60006001600160a01b031660028760405161162f9190612477565b908152604051908190036020019020546001600160a01b0316146116955760405162461bcd60e51b815260206004820152601e60248201527f506c6f74206e756d62657220616c726561647920726567697374657265640000604482015260640161052e565b6000604051806101600160405280846001600160a01b031681526020018381526020018981526020018881526020018781526020018681526020018581526020018681526020018581526020014281526020016000151581525090506001886040516117019190612477565b908152604051602091819003820190208054600180820183556000928352918390208451600b9092020180546001600160a01b0319166001600160a01b039092169190911781559183015183929182019061175c90826125b0565b506040820151600282019061177190826125b0565b506060820151600382019061178690826125b0565b506080820151600482019061179b90826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905560405181906002906117fe908a90612477565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b0390911617815590820151600182019061183d90826125b0565b506040820151600282019061185290826125b0565b506060820151600382019061186790826125b0565b506080820151600482019061187c90826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff19169115159190911790556001600160a01b0383811660009081526003602090815260408220805460018181018355918452928290208551600b9094020180546001600160a01b0319169390941692909217835583015183929182019061192890826125b0565b506040820151600282019061193d90826125b0565b506060820151600382019061195290826125b0565b506080820151600482019061196790826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff19169115159190911790556040516004906119c8908490612477565b908152604051602091819003820190208054600180820183556000928352918390208451600b9092020180546001600160a01b0319166001600160a01b0390921691909117815591830151839291820190611a2390826125b0565b5060408201516002820190611a3890826125b0565b5060608201516003820190611a4d90826125b0565b5060808201516004820190611a6290826125b0565b5060a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff1916911515919091179055604051611ac0908990612477565b604051809103902082604051611ad69190612477565b6040518091039020846001600160a01b03167f70e7c6fc807ab79015df56e4ad47cb924e80df552eba76703ab4b5017014c3408a8a8a8a600042604051611b2296959493929190612670565b60405180910390a45050505050505050565b60606000600183604051611b489190612477565b9081526040519081900360200190205411611bb15760405162461bcd60e51b8152602060048201526024808201527f4e6f20706c6f747320666f756e6420666f72207468697320746872616d206e7560448201526336b132b960e11b606482015260840161052e565b600182604051611bc19190612477565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610aa9576000848152602090819020604080516101608101909152600b850290910180546001600160a01b031682526001810180549293919291840191611c3990612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6590612406565b8015611cb25780601f10611c8757610100808354040283529160200191611cb2565b820191906000526020600020905b815481529060010190602001808311611c9557829003601f168201915b50505050508152602001600282018054611ccb90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf790612406565b8015611d445780601f10611d1957610100808354040283529160200191611d44565b820191906000526020600020905b815481529060010190602001808311611d2757829003601f168201915b50505050508152602001600382018054611d5d90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8990612406565b8015611dd65780601f10611dab57610100808354040283529160200191611dd6565b820191906000526020600020905b815481529060010190602001808311611db957829003601f168201915b50505050508152602001600482018054611def90612406565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1b90612406565b8015611e685780601f10611e3d57610100808354040283529160200191611e68565b820191906000526020600020905b815481529060010190602001808311611e4b57829003601f168201915b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260088301546080830152600983015460a0830152600a9092015460ff16151560c0909101529082526001929092019101611bef565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611eee57600080fd5b813567ffffffffffffffff80821115611f0957611f09611ec7565b604051601f8301601f19908116603f01168101908282118183101715611f3157611f31611ec7565b81604052838152866020858801011115611f4a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611f7d57600080fd5b823567ffffffffffffffff811115611f9457600080fd5b611fa085828601611edd565b95602094909401359450505050565b60005b83811015611fca578181015183820152602001611fb2565b50506000910152565b60008151808452611feb816020860160208601611faf565b601f01601f19169290920160200192915050565b6001600160a01b038c168152610160602082018190526000906120248382018e611fd3565b90508281036040840152612038818d611fd3565b9050828103606084015261204c818c611fd3565b90508281036080840152612060818b611fd3565b60a0840199909952505060c081019590955260e085019390935261010084019190915261012083015215156101409091015295945050505050565b600080604083850312156120ae57600080fd5b823567ffffffffffffffff808211156120c657600080fd5b6120d286838701611edd565b935060208501359150808211156120e857600080fd5b506120f585828601611edd565b9150509250929050565b80356001600160a01b038116811461211657600080fd5b919050565b60006020828403121561212d57600080fd5b612136826120ff565b9392505050565b80516001600160a01b031682526000610160602083015181602086015261216682860182611fd3565b915050604083015184820360408601526121808282611fd3565b9150506060830151848203606086015261219a8282611fd3565b915050608083015184820360808601526121b48282611fd3565b91505060a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401516122018287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561226057603f1988860301845261224e85835161213d565b94509285019290850190600101612232565b5092979650505050505050565b60006020828403121561227f57600080fd5b813567ffffffffffffffff81111561229657600080fd5b6122a284828501611edd565b949350505050565b602081526000612136602083018461213d565b6000806000606084860312156122d257600080fd5b833567ffffffffffffffff8111156122e957600080fd5b6122f586828701611edd565b9660208601359650604090950135949350505050565b6000806040838503121561231e57600080fd5b612327836120ff565b946020939093013593505050565b600080600080600080600060e0888a03121561235057600080fd5b873567ffffffffffffffff8082111561236857600080fd5b6123748b838c01611edd565b985060208a013591508082111561238a57600080fd5b6123968b838c01611edd565b975060408a01359150808211156123ac57600080fd5b6123b88b838c01611edd565b965060608a0135955060808a013594506123d460a08b016120ff565b935060c08a01359150808211156123ea57600080fd5b506123f78a828b01611edd565b91505092959891949750929550565b600181811c9082168061241a57607f821691505b60208210810361243a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520617070726f766572000000000000604082015260600190565b60008251612489818460208701611faf565b9190910192915050565b60008083546124a181612406565b600182811680156124b957600181146124ce576124fd565b60ff19841687528215158302870194506124fd565b8760005260208060002060005b858110156124f45781548a8201529084019082016124db565b50505082870194505b50929695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125475761254761251f565b5060010190565b81810381811115610e2d57610e2d61251f565b601f8211156125ab57600081815260208120601f850160051c810160208610156125885750805b601f850160051c820191505b818110156125a757828155600101612594565b5050505b505050565b815167ffffffffffffffff8111156125ca576125ca611ec7565b6125de816125d88454612406565b84612561565b602080601f83116001811461261357600084156125fb5750858301515b600019600386901b1c1916600185901b1785556125a7565b600085815260208120601f198616915b8281101561264257888601518255948401946001909101908401612623565b50858210156126605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c08152600061268360c0830189611fd3565b82810360208401526126958189611fd3565b604084019790975250506060810193909352901515608083015260a0909101529291505056fea26469706673582212201d9c23788f8dbf4ce8a8c2585e75abbc2e6ff225ff267baf02c68abc4715bbf264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3624,
        "contract": "contracts/LandRegistry.sol:LandRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3653,
        "contract": "contracts/LandRegistry.sol:LandRegistry",
        "label": "landsByThramNumber",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(LandDetails)3647_storage)dyn_storage)"
      },
      {
        "astId": 3658,
        "contract": "contracts/LandRegistry.sol:LandRegistry",
        "label": "landsByPlotNumber",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(LandDetails)3647_storage)"
      },
      {
        "astId": 3664,
        "contract": "contracts/LandRegistry.sol:LandRegistry",
        "label": "landsByOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(LandDetails)3647_storage)dyn_storage)"
      },
      {
        "astId": 3670,
        "contract": "contracts/LandRegistry.sol:LandRegistry",
        "label": "landsByUserDid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(LandDetails)3647_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LandDetails)3647_storage)dyn_storage": {
        "base": "t_struct(LandDetails)3647_storage",
        "encoding": "dynamic_array",
        "label": "struct LandRegistry.LandDetails[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(LandDetails)3647_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LandRegistry.LandDetails[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LandDetails)3647_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(LandDetails)3647_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct LandRegistry.LandDetails[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LandDetails)3647_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(LandDetails)3647_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct LandRegistry.LandDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(LandDetails)3647_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LandDetails)3647_storage": {
        "encoding": "inplace",
        "label": "struct LandRegistry.LandDetails",
        "members": [
          {
            "astId": 3626,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "landOwnerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3628,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "userDid",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3630,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "thramNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3632,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "plotNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3634,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "location",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3636,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "totalAreaInAcre",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3638,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "totalAreaInDecimal",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "availableAreaInAcre",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3642,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "availableAreaInDecimal",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3644,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3646,
            "contract": "contracts/LandRegistry.sol:LandRegistry",
            "label": "isVerified",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}